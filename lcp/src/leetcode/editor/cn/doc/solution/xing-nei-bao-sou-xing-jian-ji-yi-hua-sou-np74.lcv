本题有一个比较关键的思维转换，就是竖着放一块骨牌，可以等效成当前行放了1块骨牌的同时，把下一行的对应列变为broken状态。确定了这点之后就可以用主站1349,1931,2184等题目的方法来通过本题了。

用dp[curr][curbk]表示从当前行curr到最后一行，且当前行的坏块掩码为curbk时，最多能放下的骨牌数。curbk是一个二进制数，第k位为1表示第k列坏了，无法放骨牌。注意curbk里1的位置可能是初始就真的坏了，也可能是上一行有竖放骨牌的上部导致这一行某些位置等效为“坏了”。我们最后要求的就是dp[0][bk0]，bk0是首行初始损坏情况的掩码。

对于某一特定行可以用祖传回溯法来确定哪些列要放骨牌，类似于子集型回溯，不过相比普通的“选或不选”，本题可以做三种选择：1给当前格子和下一格放一块横放的骨牌，同时不影响下一行，这需要当前行这两格都没坏；2给当前格子和下一行对应列放一块竖放的骨牌，这会影响下一行，这需要当前格子没坏与下一行对应列的格子都没坏；3直接放弃这一格。

* 

```
class Solution:
    def domino(self, n: int, m: int, broken: List[List[int]]) -> int:

        bk = [0]*(n+1)
        for r,c in broken: # 先预处理初始就坏了的格子
            bk[r]|=1<<c
        
        @cache
        def dp(curr,curbk): # 处理行一定要加记忆化（其他语言用二维数组手动记忆化），这样保证每个状态只爆搜一次！
            if curr==n: return 0 #边界条件
            ans = 0

            def dfs(curc,addbk,cur): #curc为当前列，addbk表示竖放骨牌给下一行额外附带的损坏掩码，cur为当前行放的骨牌数（包括横放和竖放）
                nonlocal ans
                if curc==m: #所有列已处理完就进入下一行
                    ans=max(ans,cur+dp(curr+1,addbk|bk[curr+1])) 
                    return
                if curc<=m-2 and ((1<<curc)|(1<<(curc+1)))&curbk==0: #横放一块骨牌，不影响下一行
                    dfs(curc+2,addbk,cur+1)
                if curr<n-1 and (1<<curc)&curbk==0 and (1<<curc)&bk[curr+1]==0: #竖放一块骨牌，会影响下一行
                    dfs(curc+1,addbk|(1<<curc),cur+1)
                dfs(curc+1,addbk,cur) #放弃（curr，curc）这个格子
                
            dfs(0,0,0)
            return ans
        
        return dp(0,bk[0])
```

时间复杂度：O(n * 6^m)，n为行数，m为列数。总共有最多n * 2^m 个状态，每个状态爆搜当前行时每个格子最多3种选择，因此需要3^m的时间。总复杂度为 n * 6^m 。对于本题m和n最大为8，总复杂度有7个数量级，但实际上很多状态是难以想象的，所以实际运行速度并不慢，以本题的数据范围完全没必要做可能剪掉最优解的剪枝。
空间复杂度：O(nm * 2^m)，每个状态爆搜当前行需要的最大递归深度为m，因此总空间复杂度为状态数乘以m
