### 解题思路

* 思路：先判断能否到达终点
* 判断在到达终点前能否到达障碍物，若能则返回false
* 判断时，使用取模优化
* 第一轮机器人从坐标(0, 0)->(fx, fy)
* 若能到达目标点(tx, ty) 则 必然满足 tx = k*fx + x0, ty = k*fy + y0
* 其中 k = min(tx/fx, ty/fy)

### 代码

* java

```java
class Solution {
    public boolean robot(String cmd, int[][] obstacles, int x, int y) {
        int n = cmd.length();
        int sx = 0, sy = 0;
        // 记录走完一轮后机器人的位置
        for (int i = 0; i < n; ++ i) {
            char c = cmd.charAt(i);
            if (c == 'U') ++ sy;
            else ++ sx;
        }
        // 先计算能否到达终点 不考虑障碍物
        // 若不能直接返回false
        boolean canFinish = canReach(cmd, x, y, sx, sy);
        if (!canFinish) return false;
        // 判断在终点前会不会遇到障碍物 
        // 若遇到则返回false
        for (int[] o : obstacles) {
            if (o[0] > x || o[1] > y)
                continue;
            if (canReach(cmd, o[0], o[1], sx, sy)) return false;
        }
        return true;
    }

    // 判断能否从坐标(x, y)到达(tx, ty)
    public boolean canReach(String cmd, int tx, int ty, int x, int y) {
        // round记录走到目标点至少要走多少轮
        int round = Math.min(tx/x, ty/y);
        int nx = round*x, ny = round*y;
        if (nx == tx && ny == ty) return true;
        int n = cmd.length();
        for (int i = 0; i < n; ++ i) {
            char c = cmd.charAt(i);
            if (c == 'U') ++ ny;
            else ++ nx;
            if (nx > tx || ny > ty) return false;
            if (nx == tx && ny == ty) return true;
        }
        return true;
    }
}

```

